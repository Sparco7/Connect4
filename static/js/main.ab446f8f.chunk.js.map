{"version":3,"sources":["CalculateFuncs/calculateVertical.js","CalculateFuncs/calculateHorizontal.js","CalculateFuncs/calculateRightDiag.js","CalculateFuncs/calculateLeftDiag.js","components/Game.js","index.js"],"names":["calculateVertical","board","discCount","winnerArr","gameStatus","redArr","blueArr","redSeqCount","blueSeqCount","i","j","console","log","calculateHorizontal","calculateRightDiag","k","calculateLeftDiag","n","Game","state","player1","player2","currentPlayer","message","initBoard","setState","row","push","placeCell","disc","player","result","caclulateResults","this","className","type","onClick","map","key","winnerCells","React","Component","Row","val","col","isWinner","includes","Cell","color","winnerClass","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab446f8f.chunk.js","sourcesContent":["\r\n\r\n\tconst calculateVertical = (board, discCount, winnerArr, gameStatus) => {\r\n        let redArr = [];\r\n        let blueArr = [];\r\n        let redSeqCount = 0;\r\n        let blueSeqCount = 0;\r\n        // checks winning in a row\r\n        for(let i=0; i<=6; i++){\r\n            for(let j=5; j>=0; j--){\r\n                if(board[j][i]) {\r\n                    if (board[j][i] === 'RED') {\r\n                      redSeqCount++;\r\n                      blueSeqCount = 0;\r\n                      redArr = [...redArr,`${i},${j}`];\r\n                      blueArr = [];\r\n                    } else  {\r\n                      blueSeqCount++;\r\n                      redSeqCount = 0;\r\n                      redArr = [];\r\n                      blueArr = [...blueArr,`${i},${j}`];\r\n                    } \r\n                    if (redSeqCount === 4)  {\r\n                        gameStatus = 'RED';\r\n                        winnerArr = redArr;\r\n                        console.log('red won vertical');\r\n                        return ['RED', winnerArr, 'Red has won!'];\r\n                    }\r\n                    if (blueSeqCount === 4) {\r\n                        gameStatus = 'BLUE';\r\n                        winnerArr = blueArr;\r\n                        console.log('blue won vertical');\r\n                        return ['BLUE', winnerArr, 'Blue has won!'];\r\n                    } \r\n                    if (discCount === 41) {\r\n                        return['', [], 'It is a tie'] \r\n                    };\r\n                } // 1st if\r\n            } // 2nd for\r\n            redSeqCount = 0;\r\n            blueSeqCount = 0;\r\n            redArr = [];\r\n            blueArr = [];\r\n        } // 1st for\r\n        return null;\r\n    }\r\n\r\n    export default calculateVertical;","\r\n\r\nconst calculateHorizontal = (board, discCount, winnerArr, gameStatus) => {\r\n        let redArr = [];\r\n        let blueArr = [];\r\n        let redSeqCount = 0;\r\n        let blueSeqCount = 0;\r\n        // checks winning in a row\r\n        for(let j=5; j>=0; j--){\r\n            for(let i=0; i<=6; i++){\r\n                if(board[j][i]) {\r\n                    if (board[j][i] === 'RED') {\r\n                      redSeqCount++;\r\n                      blueSeqCount = 0;\r\n                      redArr = [...redArr,`${i},${j}`];\r\n                      blueArr = [];\r\n                    } else if (board[j][i] === 'BLUE')  {\r\n                      blueSeqCount++;\r\n                      redSeqCount = 0;\r\n                      redArr = [];\r\n                      blueArr = [...blueArr,`${i},${j}`];\r\n                    } else {\r\n                      redSeqCount = 0;\r\n                      blueSeqCount = 0;\r\n                      redArr = [];\r\n                      blueArr = [];\r\n                    }\r\n                    if (redSeqCount === 4)  {\r\n                        gameStatus = 'RED';\r\n                        winnerArr = redArr;\r\n                        console.log('red won horizontal');\r\n                        return ['RED', winnerArr, 'Red has won!' ];\r\n                        break;\r\n                    }\r\n                    if (blueSeqCount === 4) {\r\n                        gameStatus = 'BLUE';\r\n                        winnerArr = blueArr;\r\n                        console.log('blue won horizontal');\r\n                        return ['BLUE', winnerArr, 'Blue has won!'];\r\n                        break;\r\n                    }\r\n\r\n                    if (discCount  === 41) {\r\n                       return['', [], 'It is a tie']\r\n                    };\r\n\r\n                } else {\r\n                redSeqCount = 0;\r\n                blueSeqCount = 0; \r\n                redArr = [];\r\n                blueArr = []; \r\n                }\r\n            } // 2nd for\r\n            redSeqCount = 0;\r\n            blueSeqCount = 0;\r\n            redArr = [];\r\n            blueArr = [];\r\n        } // 1st for\r\n        redSeqCount = 0;\r\n        blueSeqCount = 0;\r\n        redArr = [];\r\n        blueArr = [];\r\n        return null;\r\n    }\r\n\r\n    export default calculateHorizontal;","  const calculateRightDiag = (board, discCount, winnerArr, gameStatus) => {\r\n        let redArr = [];\r\n        let blueArr = [];\r\n        let redSeqCount = 0;\r\n        let blueSeqCount = 0;\r\n\r\n        for(let i=5; i>=3; i--){\r\n            for(let k=0; k<=3; k++){\r\n                for(let j=0; j<=3; j++){\r\n                    if (board[i-j][j+k]) {\r\n                        if (board[i-j][j+k] === 'RED') {\r\n                          redSeqCount++;\r\n                          blueSeqCount = 0;\r\n                          redArr = [...redArr,`${j+k},${i-j}`];\r\n                          blueArr = [];\r\n                        } else if(board[i-j][j+k] === 'BLUE') {\r\n                          blueSeqCount++;\r\n                          redSeqCount = 0;\r\n                          blueArr = [...blueArr,`${j+k},${i-j}`];\r\n                          redArr = [];\r\n                        } \r\n\r\n                        if (redSeqCount === 4)  {\r\n                            gameStatus = 'RED';\r\n                            winnerArr = redArr;\r\n                            console.log('red won right diagonal');\r\n                            return ['RED', winnerArr, 'Red has won!'];\r\n                        }\r\n\r\n                        if (blueSeqCount === 4)  {\r\n                            gameStatus = 'BLUE';\r\n                            winnerArr = blueArr;\r\n                            console.log('blue won right diagonal');\r\n                            return ['BLUE', winnerArr, 'Blue has won!'];\r\n                        }\r\n                        if (discCount  === 41) {\r\n                            return['', [], 'It is a tie'];\r\n                           \r\n                        };\r\n                    } else {\r\n                        redSeqCount = 0;\r\n                        blueSeqCount = 0;\r\n                        redArr = [];  \r\n                        blueArr = [];\r\n                    } // first if\r\n                } //3rd for\r\n                redSeqCount = 0;\r\n                blueSeqCount = 0; \r\n                redArr = [];\r\n                blueArr = [];\r\n            } // 2nd for\r\n        } // 1st for\r\n        return null;\r\n    } // func\r\n\r\n    export default calculateRightDiag;","    const calculateLeftDiag = (board, discCount, winnerArr, gameStatus) => {\r\n        let redArr = [];\r\n        let blueArr = [];\r\n        let redSeqCount = 0;\r\n        let blueSeqCount = 0;\r\n\r\n        for(let i=5; i>=3; i--){\r\n            for(let k=0; k<=3; k++){\r\n                for(let j=6, n=0; j>=3; j--, n++){\r\n                    if (board[i-n][j-k]) {\r\n                        if (board[i-n][j-k] === 'RED') {\r\n                          redSeqCount++;\r\n                          blueSeqCount = 0;\r\n                          redArr = [...redArr,`${j-k},${i-n}`];\r\n                          blueArr = [];\r\n                        } else if(board[i-n][j-k] === 'BLUE') {\r\n                          blueSeqCount++;\r\n                          redSeqCount = 0;\r\n                          blueArr = [...blueArr,`${j-k},${i-n}`];\r\n                          redArr = [];\r\n                        } // 2nd if\r\n      \r\n                        if (redSeqCount === 4)  {\r\n                            gameStatus = 'RED';\r\n                            winnerArr = redArr;\r\n                            console.log('red won left diagonal');\r\n                            return ['RED', winnerArr, 'Red has won!'];\r\n                        }\r\n\r\n                         if (blueSeqCount === 4)  {\r\n                            gameStatus ='BLUE';\r\n                            winnerArr = blueArr;\r\n                            console.log('blue won left diagonal');\r\n                            return ['BLUE', winnerArr, 'Blue has won!'];\r\n                        }\r\n\r\n                        if (discCount === 41) {\r\n                            return['', [], 'It is a tie'];\r\n                        }\r\n                    } else {\r\n                        redSeqCount = 0;\r\n                        blueSeqCount = 0;\r\n                        redArr = [];\r\n                        blueArr = [];              \r\n                    } // first if  \r\n                } //3rd for\r\n                    redSeqCount = 0;\r\n                    blueSeqCount = 0; \r\n                    redArr = [];\r\n                    blueArr = []; \r\n            } //2nd for\r\n        } //1st fot\r\n        return null;\r\n    } //func \r\n\r\nexport default calculateLeftDiag;","import React from 'react';\r\nimport gameCSS from './game.css';\r\n\r\nimport calculateVertical from '../CalculateFuncs/calculateVertical';\r\nimport calculateHorizontal from '../CalculateFuncs/calculateHorizontal';\r\nimport calculateRightDiag from '../CalculateFuncs/calculateRightDiag';\r\nimport calculateLeftDiag from '../CalculateFuncs/calculateLeftDiag';\r\n\r\nclass Game extends React.Component {\r\n\r\n    // Declaring properties\r\n    state = {\r\n        board: [],\r\n        player1: 'RED',\r\n        player2: 'BLUE',\r\n        currentPlayer: null,\r\n        gameStatus: null,\r\n        message: '',\r\n        discCount: 0,\r\n        winnerArr: [] // example: ['0,3','0,4','0,5','0,6']\r\n    }\r\n\r\n    componentDidMount() {    \r\n        this.initBoard();\r\n    } \r\n\r\n    // initializing board\r\n    initBoard = () => {\r\n        // console.log('gameStatus is: ',this.state.gameStatus);\r\n        this.setState({board: []});\r\n        this.setState({currentPlayer: null});\r\n        this.setState({gameStatus: null});\r\n        this.setState({message: ''});\r\n        this.setState({discCount: 0});\r\n        this.setState({winnerArr: []});\r\n\r\n        let board = [];\r\n        // creating 6 rows\r\n        for(let j=0; j<6; j++) {\r\n            let row = [];\r\n            // filling rows in NULL\r\n            for(let i=0; i<7; i++) {\r\n                row.push(null);\r\n            }\r\n            board.push(row);\r\n        }\r\n        this.setState({board: board});\r\n        this.setState({currentPlayer: this.state.player1});\r\n    }\r\n\r\n    // user's placing a disc\r\n    placeCell = (disc) => {\r\n        if(!this.state.gameStatus) {\r\n            let board = this.state.board;\r\n            let player = this.state.currentPlayer;\r\n            for(let i=5; i>=0; i--) {\r\n                if(!board[i][disc]) {\r\n                    board[i][disc] = player;\r\n                    this.setState({discCount: this.state.discCount+1});\r\n                break;\r\n                }\r\n            }\r\n            this.setState({board: board});\r\n\r\n            // changing player's turn\r\n            this.state.currentPlayer == this.state.player1 ? \r\n                this.setState({currentPlayer: this.state.player2}) : \r\n                this.setState({currentPlayer: this.state.player1});\r\n                \r\n            let result = this.caclulateResults();\r\n            if (result) {\r\n                    this.setState({gameStatus: result[0]});\r\n                    this.setState({winnerArr: result[1]});\r\n                    this.setState({message: result[2]});\r\n            }\r\n        }  \r\n    }\r\n\r\n    caclulateResults = () => {\r\n\r\n                let result = null;\r\n                result = calculateHorizontal(\r\n                    this.state.board, this.state.discCount,\r\n                    this.state.winnerArr,\r\n                    this.state.gameStatus);\r\n                if (result) {\r\n                    return result;\r\n                };\r\n\r\n                result = calculateVertical(\r\n                    this.state.board, this.state.discCount,\r\n                    this.state.winnerArr,\r\n                    this.state.gameStatus);\r\n                if (result) {\r\n                    return result;\r\n                };\r\n\r\n                result = calculateLeftDiag(\r\n                    this.state.board, this.state.discCount,\r\n                    this.state.winnerArr,\r\n                    this.state.gameStatus); \r\n                if (result) {\r\n                    return result;\r\n                };  \r\n\r\n                result = calculateRightDiag(\r\n                    this.state.board, this.state.discCount,\r\n                    this.state.winnerArr,\r\n                    this.state.gameStatus);\r\n                if (result) {\r\n                    return result;\r\n                };\r\n   \r\n    }\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n            <div className=\"head-line\"><h1>Connect 4</h1></div>\r\n            <div> \r\n                <button type=\"button\" className=\"btn btn-secondary new-game\"\r\n                    onClick={()=> this.initBoard()}>\r\n                    New Game\r\n                </button>\r\n            </div>\r\n            <div className={this.state.currentPlayer}>\r\n                    { !(this.state.gameStatus)&&(this.state.discCount < 42) &&\r\n                    <p>\r\n                        {this.state.currentPlayer} TURN\r\n                    </p>\r\n                    }\r\n            </div>\r\n            <div className=\"win-msg\"><h2>{this.state.message}</h2></div>\r\n            <div className=\"board\">\r\n              { \r\n                  this.state.board.map((row, i) =>\r\n                   <Row key={i} row={row} i={i} \r\n                    placeCell={this.placeCell}\r\n                    winnerCells={this.state.winnerArr} />)\r\n              }\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n} // Game\r\n\r\nconst Row = ({row, i, placeCell, gameStatus, winnerCells, board,\r\n                winnerArr, message, discCount}) => {\r\n  return (\r\n    <div className=\"row\">\r\n        { \r\n            row.map((val, col) =>\r\n           <Cell key={col}\r\n            val={val} col={col} \r\n            board={board}\r\n            placeCell={placeCell} gameStatus={gameStatus}\r\n            isWinner={winnerCells.includes(`${col},${i}`)} />)\r\n        }\r\n    </div>\r\n    )\r\n}\r\n\r\nconst Cell = ({val, col, placeCell, gameStatus, isWinner,\r\n                board, winnerArr, message, discCount}) => {\r\n\r\n  \r\n  let color = '';\r\n  let winnerClass = 'cell';\r\n\r\n      if (isWinner) {\r\n        winnerClass = 'cell winner'\r\n      } \r\n      if (val === 'RED') {\r\n          color = 'red';\r\n      } else if (val === 'BLUE') {\r\n          color ='blue';\r\n      }\r\n\r\n\r\n  return (\r\n    <div>\r\n        <div className={winnerClass} onClick={() => {placeCell(col)}}>\r\n            <div className={color}></div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './components/Game'\r\n\r\nReactDOM.render(\r\n\t<Game />, document.getElementById('root')\r\n)"],"sourceRoot":""}